/**
 * üîó SHARE INTENT FUNCTIONALITY TEST
 * 
 * This script tests and verifies the share intent configuration
 * to ensure Shabari appears in the "Share with" menu
 * 
 * Run: node test-share-intent-functionality.js
 */

console.log('üöÄ Testing Share Intent Functionality...\n');

// Mock React Native environment
global.Platform = { OS: 'android' };

function testShareIntentConfiguration() {
  console.log('üìã SHARE INTENT CONFIGURATION ANALYSIS');
  console.log('=' .repeat(50));
  
  // Read app.json configuration
  const fs = require('fs');
  const path = require('path');
  
  try {
    const appJsonPath = path.join(__dirname, 'app.json');
    const appJsonContent = fs.readFileSync(appJsonPath, 'utf8');
    const appConfig = JSON.parse(appJsonContent);
    
    console.log('‚úÖ app.json found and parsed successfully');
    
    // Check Android intent filters
    const androidConfig = appConfig.expo?.android;
    if (androidConfig && androidConfig.intentFilters) {
      console.log('‚úÖ Intent filters found in app.json');
      console.log(`üìä Number of intent filters: ${androidConfig.intentFilters.length}`);
      
      // Analyze each intent filter
      androidConfig.intentFilters.forEach((filter, index) => {
        console.log(`\nüîç Intent Filter ${index + 1}:`);
        console.log(`   Action: ${filter.action}`);
        console.log(`   Categories: ${filter.category ? filter.category.join(', ') : 'None'}`);
        
        if (filter.data) {
          if (Array.isArray(filter.data)) {
            console.log(`   MIME Types: ${filter.data.map(d => d.mimeType || d.scheme).join(', ')}`);
          } else {
            console.log(`   MIME Type: ${filter.data.mimeType || filter.data.scheme || 'Unknown'}`);
          }
        }
      });
      
      // Check for required intent filters
      const requiredFilters = [
        'android.intent.action.SEND',
        'android.intent.action.SEND_MULTIPLE',
        'android.intent.action.PROCESS_TEXT'
      ];
      
      const foundActions = androidConfig.intentFilters.map(f => f.action);
      const missingActions = requiredFilters.filter(action => !foundActions.includes(action));
      
      if (missingActions.length === 0) {
        console.log('\n‚úÖ All required intent filters are present');
      } else {
        console.log('\n‚ö†Ô∏è Missing intent filters:', missingActions.join(', '));
      }
      
    } else {
      console.log('‚ùå No intent filters found in app.json');
    }
    
  } catch (error) {
    console.error('‚ùå Error reading app.json:', error.message);
  }
}

function testAndroidManifestConfiguration() {
  console.log('\nüì± ANDROID MANIFEST CONFIGURATION');
  console.log('=' .repeat(50));
  
  const fs = require('fs');
  const path = require('path');
  
  try {
    const manifestPath = path.join(__dirname, 'android', 'app', 'src', 'main', 'AndroidManifest.xml');
    
    if (fs.existsSync(manifestPath)) {
      const manifestContent = fs.readFileSync(manifestPath, 'utf8');
      console.log('‚úÖ AndroidManifest.xml found');
      
      // Check for intent filters in manifest
      const intentFilterCount = (manifestContent.match(/<intent-filter/g) || []).length;
      console.log(`üìä Intent filters in manifest: ${intentFilterCount}`);
      
      // Check for specific actions
      const actions = [
        'android.intent.action.SEND',
        'android.intent.action.SEND_MULTIPLE',
        'android.intent.action.PROCESS_TEXT'
      ];
      
      actions.forEach(action => {
        if (manifestContent.includes(action)) {
          console.log(`‚úÖ Found: ${action}`);
        } else {
          console.log(`‚ùå Missing: ${action}`);
        }
      });
      
      // Check for MIME types
      const mimeTypes = [
        'text/plain',
        'image/*',
        'image/jpeg',
        'image/png'
      ];
      
      console.log('\nüìã MIME Type Support:');
      mimeTypes.forEach(mimeType => {
        if (manifestContent.includes(mimeType)) {
          console.log(`‚úÖ Supports: ${mimeType}`);
        } else {
          console.log(`‚ùå Missing: ${mimeType}`);
        }
      });
      
    } else {
      console.log('‚ö†Ô∏è AndroidManifest.xml not found - will be generated by Expo');
      console.log('üìù Intent filters from app.json will be used instead');
    }
    
  } catch (error) {
    console.error('‚ùå Error reading AndroidManifest.xml:', error.message);
  }
}

function testShareIntentService() {
  console.log('\nüîß SHARE INTENT SERVICE TEST');
  console.log('=' .repeat(50));
  
  try {
    // Test the ShareIntentService
    console.log('üì¶ Testing ShareIntentService import...');
    
    // Mock the react-native-receive-sharing-intent module
    const mockReceiveSharingIntent = {
      getReceivedFiles: () => Promise.resolve([]),
      getReceivedText: () => Promise.resolve(''),
      clearReceivedFiles: () => Promise.resolve(),
      clearReceivedText: () => Promise.resolve()
    };
    
    // Mock require function
    const originalRequire = require;
    require = function(moduleName) {
      if (moduleName === 'react-native-receive-sharing-intent') {
        return mockReceiveSharingIntent;
      }
      return originalRequire.apply(this, arguments);
    };
    
    // Import ShareIntentService
    const { ShareIntentService } = require('./src/services/ShareIntentService');
    
    console.log('‚úÖ ShareIntentService imported successfully');
    
    // Test service initialization
    const service = ShareIntentService.getInstance();
    console.log('‚úÖ ShareIntentService instance created');
    
    // Test callbacks
    const mockCallbacks = {
      onUrlReceived: (url) => console.log('üì• URL received:', url),
      onFileReceived: (file) => console.log('üìÅ File received:', file.fileName),
      onScanComplete: (result) => console.log('üîç Scan complete:', result.scanType),
      onUrlBlocked: (result) => console.log('üö´ URL blocked:', result.url),
      onUrlVerified: (result) => console.log('‚úÖ URL verified:', result.url),
      onError: (error) => console.log('‚ùå Error:', error)
    };
    
    service.initialize(mockCallbacks);
    console.log('‚úÖ ShareIntentService initialized with callbacks');
    
    // Test service status
    console.log(`üìä Service initialized: ${service.isServiceInitialized()}`);
    console.log(`üìä Share intent supported: ${service.isShareIntentSupported()}`);
    
    // Restore original require
    require = originalRequire;
    
  } catch (error) {
    console.error('‚ùå ShareIntentService test failed:', error.message);
  }
}

function provideTroubleshootingSteps() {
  console.log('\nüîß TROUBLESHOOTING STEPS');
  console.log('=' .repeat(50));
  
  console.log(`
üì± WHY SHABARI MIGHT NOT APPEAR IN SHARE MENU:

1. üèóÔ∏è BUILD REQUIRED:
   ‚Ä¢ Expo Go doesn't support share intents
   ‚Ä¢ You need to build a development build or production APK
   ‚Ä¢ Run: npx expo run:android

2. üì¶ PACKAGE INSTALLATION:
   ‚Ä¢ Ensure react-native-receive-sharing-intent is installed
   ‚Ä¢ Check: npm list react-native-receive-sharing-intent

3. üîÑ APP RESTART:
   ‚Ä¢ After configuration changes, rebuild the app
   ‚Ä¢ Clear app cache and restart

4. üì± DEVICE TESTING:
   ‚Ä¢ Test on real Android device (not emulator)
   ‚Ä¢ Share a photo or text from another app
   ‚Ä¢ Look for "Shabari" in the share menu

5. ‚öôÔ∏è PERMISSIONS:
   ‚Ä¢ Check if app has necessary permissions
   ‚Ä¢ Go to Settings > Apps > Shabari > Permissions

üìã HOW TO TEST SHARE FUNCTIONALITY:

1. üì∏ SHARE A PHOTO:
   ‚Ä¢ Open Gallery app
   ‚Ä¢ Select any photo
   ‚Ä¢ Tap Share button
   ‚Ä¢ Look for "Shabari" in the list

2. üìù SHARE TEXT:
   ‚Ä¢ Open Messages or WhatsApp
   ‚Ä¢ Select text message
   ‚Ä¢ Tap Share button
   ‚Ä¢ Look for "Shabari" in the list

3. üîó SHARE A LINK:
   ‚Ä¢ Open Chrome browser
   ‚Ä¢ Visit any website
   ‚Ä¢ Tap Share button
   ‚Ä¢ Look for "Shabari" in the list

‚úÖ EXPECTED BEHAVIOR:
   ‚Ä¢ Shabari should appear in share menu
   ‚Ä¢ When selected, app should open
   ‚Ä¢ Content should be analyzed for fraud
   ‚Ä¢ Results should be displayed

üöÄ BUILD COMMANDS:
   ‚Ä¢ Development build: npx expo run:android
   ‚Ä¢ Production build: eas build --platform android
   ‚Ä¢ Install APK: adb install app.apk
  `);
}

function checkPackageDependencies() {
  console.log('\nüì¶ PACKAGE DEPENDENCIES CHECK');
  console.log('=' .repeat(50));
  
  const fs = require('fs');
  const path = require('path');
  
  try {
    const packageJsonPath = path.join(__dirname, 'package.json');
    const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));
    
    const requiredPackages = {
      'react-native-receive-sharing-intent': 'Share intent handling',
      'expo-intent-launcher': 'Intent launching',
      'expo-linking': 'Deep linking support',
      '@react-native-clipboard/clipboard': 'Clipboard access'
    };
    
    console.log('üìã Required packages for share functionality:');
    
    Object.entries(requiredPackages).forEach(([packageName, description]) => {
      const version = packageJson.dependencies?.[packageName] || packageJson.devDependencies?.[packageName];
      if (version) {
        console.log(`‚úÖ ${packageName}: ${version} - ${description}`);
      } else {
        console.log(`‚ùå ${packageName}: NOT INSTALLED - ${description}`);
      }
    });
    
  } catch (error) {
    console.error('‚ùå Error reading package.json:', error.message);
  }
}

// Run all tests
async function runAllTests() {
  try {
    testShareIntentConfiguration();
    testAndroidManifestConfiguration();
    testShareIntentService();
    checkPackageDependencies();
    provideTroubleshootingSteps();
    
    console.log('\nüéâ Share Intent Functionality Test Complete!');
    console.log('\nüí° NEXT STEPS:');
    console.log('1. Build the app: npx expo run:android');
    console.log('2. Install on real Android device');
    console.log('3. Test sharing from Gallery, Messages, or Browser');
    console.log('4. Look for "Shabari" in the share menu');
    
  } catch (error) {
    console.error('‚ùå Test execution failed:', error);
  }
}

runAllTests(); 